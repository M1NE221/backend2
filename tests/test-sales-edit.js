/**
 * Script de prueba para verificar endpoints de edici√≥n de ventas
 * Ejecutar con: node test-sales-edit.js
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

// Configura estos valores seg√∫n tu aplicaci√≥n
const TEST_CONFIG = {
  // Necesitas obtener un token de autenticaci√≥n v√°lido
  authToken: 'TU_TOKEN_AQUI', // ‚Üê Cambiar por un token real
  // ID de una venta existente en tu base de datos
  saleId: 'ID_VENTA_EXISTENTE', // ‚Üê Cambiar por un ID real
  // ID de un cliente existente
  clientId: 'ID_CLIENTE_EXISTENTE' // ‚Üê Cambiar por un ID real
};

const headers = {
  'Authorization': `Bearer ${TEST_CONFIG.authToken}`,
  'Content-Type': 'application/json',
  'X-User-ID': 'TU_USER_ID' // ‚Üê Si es necesario
};

async function testSalesAPI() {
  console.log('üß™ INICIANDO PRUEBAS DE API DE VENTAS\n');

  try {
    // PRUEBA 1: Obtener ventas existentes
    console.log('1Ô∏è‚É£ Obteniendo lista de ventas...');
    const salesResponse = await axios.get(`${BASE_URL}/api/sales`, { headers });
    console.log('‚úÖ GET /api/sales - Status:', salesResponse.status);
    console.log('üìä Total ventas encontradas:', salesResponse.data.data.sales.length);
    
    if (salesResponse.data.data.sales.length > 0) {
      const firstSale = salesResponse.data.data.sales[0];
      console.log('üìù Primera venta ID:', firstSale.venta_id);
      console.log('üí∞ Total actual:', firstSale.total_venta);
      
      // Usar el ID de la primera venta para las pruebas
      TEST_CONFIG.saleId = firstSale.venta_id;
    }
    
  } catch (error) {
    console.log('‚ùå Error obteniendo ventas:', error.response?.data || error.message);
    return;
  }

  try {
    // PRUEBA 2: Obtener venta espec√≠fica
    console.log('\n2Ô∏è‚É£ Obteniendo venta espec√≠fica...');
    const saleResponse = await axios.get(`${BASE_URL}/api/sales/${TEST_CONFIG.saleId}`, { headers });
    console.log('‚úÖ GET /api/sales/:id - Status:', saleResponse.status);
    const originalSale = saleResponse.data.data.sale;
    console.log('üìã Venta original:', {
      id: originalSale.venta_id,
      total: originalSale.total_venta,
      cliente: originalSale.Clientes?.nombre || 'Sin cliente'
    });

  } catch (error) {
    console.log('‚ùå Error obteniendo venta espec√≠fica:', error.response?.data || error.message);
    return;
  }

  try {
    // PRUEBA 3: Editar venta (solo total)
    console.log('\n3Ô∏è‚É£ Editando venta (solo total)...');
    const newTotal = 123.45;
    const editResponse = await axios.put(`${BASE_URL}/api/sales/${TEST_CONFIG.saleId}`, {
      total_venta: newTotal
    }, { headers });
    
    console.log('‚úÖ PUT /api/sales/:id - Status:', editResponse.status);
    console.log('üí∞ Nuevo total:', editResponse.data.data.sale.total_venta);
    console.log('üìù Mensaje:', editResponse.data.data.message);

  } catch (error) {
    console.log('‚ùå Error editando venta:', error.response?.data || error.message);
  }

  try {
    // PRUEBA 4: Editar venta (con notas)
    console.log('\n4Ô∏è‚É£ Editando venta (agregando notas)...');
    const editWithNotesResponse = await axios.put(`${BASE_URL}/api/sales/${TEST_CONFIG.saleId}`, {
      notas: 'Venta editada desde script de prueba - ' + new Date().toLocaleString()
    }, { headers });
    
    console.log('‚úÖ PUT /api/sales/:id (notas) - Status:', editWithNotesResponse.status);
    console.log('üìù Notas agregadas:', editWithNotesResponse.data.data.sale.notas);

  } catch (error) {
    console.log('‚ùå Error agregando notas:', error.response?.data || error.message);
  }

  try {
    // PRUEBA 5: Intentar editar con datos inv√°lidos
    console.log('\n5Ô∏è‚É£ Probando validaciones (total negativo)...');
    await axios.put(`${BASE_URL}/api/sales/${TEST_CONFIG.saleId}`, {
      total_venta: -100 // ‚Üê Esto debe fallar
    }, { headers });
    
    console.log('‚ùå ERROR: Deber√≠a haber rechazado total negativo');

  } catch (error) {
    if (error.response?.status === 400) {
      console.log('‚úÖ Validaci√≥n funcionando - rechaz√≥ total negativo');
      console.log('üìù Error esperado:', error.response.data.error);
    } else {
      console.log('‚ùå Error inesperado:', error.response?.data || error.message);
    }
  }

  try {
    // PRUEBA 6: Intentar editar venta inexistente
    console.log('\n6Ô∏è‚É£ Probando venta inexistente...');
    await axios.put(`${BASE_URL}/api/sales/00000000-0000-0000-0000-000000000000`, {
      total_venta: 100
    }, { headers });
    
    console.log('‚ùå ERROR: Deber√≠a haber rechazado venta inexistente');

  } catch (error) {
    if (error.response?.status === 404) {
      console.log('‚úÖ Validaci√≥n funcionando - rechaz√≥ venta inexistente');
    } else {
      console.log('‚ùå Error inesperado:', error.response?.data || error.message);
    }
  }

  console.log('\nüéâ PRUEBAS COMPLETADAS');
  console.log('\nüìã RESUMEN:');
  console.log('‚Ä¢ Si todas las pruebas muestran ‚úÖ, el endpoint est√° funcionando');
  console.log('‚Ä¢ Si alguna muestra ‚ùå, revisa los errores espec√≠ficos');
  console.log('‚Ä¢ Verifica que los IDs de venta y cliente sean v√°lidos');
}

// Funci√≥n de ayuda para configurar el script
function showSetupInstructions() {
  console.log('üîß CONFIGURACI√ìN REQUERIDA:');
  console.log('');
  console.log('1. Obt√©n un token de autenticaci√≥n:');
  console.log('   - Inicia sesi√≥n en tu frontend');
  console.log('   - Abre las herramientas de desarrollador (F12)');
  console.log('   - Ve a Network > Headers > Authorization');
  console.log('   - Copia el token');
  console.log('');
  console.log('2. Encuentra un ID de venta existente:');
  console.log('   - Ve a GET /api/sales en tu frontend');
  console.log('   - Copia un venta_id de la respuesta');
  console.log('');
  console.log('3. Actualiza las variables en TEST_CONFIG');
  console.log('');
  console.log('4. Ejecuta: node test-sales-edit.js');
}

// Verificar configuraci√≥n
if (TEST_CONFIG.authToken === 'TU_TOKEN_AQUI') {
  showSetupInstructions();
} else {
  testSalesAPI();
}